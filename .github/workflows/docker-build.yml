name: Build, Scan & Push Docker Image Reusable

on:
  workflow_call:
    secrets:
      GHCR_PAT:
        required: true
      DISCORD_WEBHOOK_URL:
        required: true
    inputs:
      skip_trivy:
        description: "Skip Trivy scan"
        required: false
        default: 'false'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout du repo (sans fetch-depth pour acc√©der √† tous les tags)
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Log in au registre GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      # 3Ô∏è‚É£ D√©finir et checkout le bon tag si schedule
      - name: Set image tags and checkout tag
        run: |
          if [ "${{ github.event_name }}" = "schedule" ]; then
            echo "üìÖ Build programm√© d√©tect√©"
            TAG=$(git tag | sort -V | tail -n1)

            if [ -z "$TAG" ]; then
              echo "‚ö†Ô∏è Aucun tag trouv√© ‚Äî arr√™t du workflow sans erreur."
              echo "no_tag_found=true" >> $GITHUB_ENV
              exit 78  # ‚úÖ Arr√™t neutre, pas d‚Äôerreur
            fi
            
            echo "Dernier tag trouv√©: $TAG"
            git checkout "tags/$TAG"
          else
            echo "üöÄ Build depuis un √©v√©nement Release"
            TAG=${GITHUB_REF##*/}
          fi

          REPO_NAME=${GITHUB_REPOSITORY##*/}
          IMAGE="ghcr.io/${{ github.repository_owner }}/$REPO_NAME:$TAG"

          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      # 4Ô∏è‚É£ Build de l'image Docker (no cache)
      - name: Build Docker image
        run: docker build --no-cache -t $IMAGE .

      # 5Ô∏è‚É£ Scan de l'image avec Trivy (ne stoppe plus le workflow)
      - name: Scan image with Trivy
        if: ${{ inputs.skip_trivy != 'true' }}
        id: trivy
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.IMAGE }}
          format: table
          exit-code: 1
          severity: HIGH,CRITICAL
          vuln-type: os,library
          ignore-unfixed: false
          timeout: 5m

      # 5Ô∏è‚É£ bis ‚Äî Envoi Discord si le scan √©choue
      - name: Send Discord alert if vulnerabilities found
        if: steps.trivy.outcome == 'failure'
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "‚ö†Ô∏è Vuln√©rabilit√©s d√©tect√©es, envoi d'une alerte Discord..."
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"username\": \"Trivy Alert\", \"content\": \"üö® Vuln√©rabilit√©s d√©tect√©es dans l'image **${{ env.IMAGE }}** lors du build GitHub Actions !\nüîó [Voir le run GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\"}" \
               "$DISCORD_WEBHOOK_URL"

      # 6Ô∏è‚É£ Push de l'image
      - name: Push Docker image
        run: docker push $IMAGE

      # 7Ô∏è‚É£ Push du tag 'latest' seulement si ce n‚Äôest pas un run manuel
      - name: Push 'latest' tag (skip if manual)
        if: github.event_name == 'schedule' || github.event_name == 'release'
        run: |
          docker tag $IMAGE ghcr.io/${{ github.repository_owner }}/$REPO_NAME:latest
          docker push ghcr.io/${{ github.repository_owner }}/$REPO_NAME:latest
