name: Replicate GHCR_PAT and Copy Workflow

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Nom du dépôt cible (ex: mon-app)'
        required: true
      ghcr_pat:
        description: 'Valeur du GHCR_PAT à créer dans le dépôt cible'
        required: true

jobs:
  replicate-and-copy:
    runs-on: ubuntu-latest
    steps:

      # 1️⃣ Installer les dépendances Python
      - name: Setup Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pynacl requests

      # 2️⃣ Créer le secret GHCR_PAT si il n'existe pas
      - name: Create GHCR_PAT secret if not exists
        env:
          ADMIN_PAT: ${{ secrets.MASTER_PAT }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          SECRET_VALUE: ${{ github.event.inputs.ghcr_pat }}
          SOURCE_USER: ${{ github.repository_owner }}
        run: |
          python - <<'PYTHON'
          import os, requests, json, base64
          import nacl.encoding, nacl.public

          admin_pat = os.environ["ADMIN_PAT"]
          repo = os.environ["TARGET_REPO"]
          secret_value = os.environ["SECRET_VALUE"]
          source_user = os.environ["SOURCE_USER"]

          # Vérifier si le secret existe déjà
          url_list = f"https://api.github.com/repos/{source_user}/{repo}/actions/secrets"
          headers = {"Authorization": f"token {admin_pat}", "Accept": "application/vnd.github+json"}
          r = requests.get(url_list, headers=headers)
          r.raise_for_status()
          secrets_list = [s["name"] for s in r.json().get("secrets", [])]

          if "GHCR_PAT" in secrets_list:
              print(f"Secret GHCR_PAT existe déjà dans {repo}, rien à faire.")
          else:
              # Récupérer la clé publique du dépôt
              url_key = f"https://api.github.com/repos/{source_user}/{repo}/actions/secrets/public-key"
              r = requests.get(url_key, headers=headers)
              r.raise_for_status()
              pubkey = r.json()
              key_id = pubkey["key_id"]
              key = pubkey["key"]

              # Chiffrer le secret
              public_key = nacl.public.PublicKey(key.encode("utf-8"), encoder=nacl.encoding.Base64Encoder)
              sealed_box = nacl.public.SealedBox(public_key)
              encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
              encrypted_value = base64.b64encode(encrypted).decode("utf-8")

              # Créer le secret
              put_url = f"https://api.github.com/repos/{source_user}/{repo}/actions/secrets/GHCR_PAT"
              data = {"encrypted_value": encrypted_value, "key_id": key_id}
              r = requests.put(put_url, headers=headers, data=json.dumps(data))
              r.raise_for_status()
              print(f"Secret GHCR_PAT créé dans {repo} !")
          PYTHON

      # 3️⃣ Copier le workflow template uniquement si le fichier n'existe pas
      - name: Copy template workflow if not exists
        env:
          GH_TOKEN: ${{ secrets.MASTER_PAT }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          SOURCE_REPO: ${{ github.repository }}
        run: |
          # Récupérer le contenu du template depuis le dépôt source
          FILE_CONTENT=$(gh api repos/$SOURCE_REPO/contents/templates/build.yml \
                         -q .content | base64 --decode)
      
          # Re-encoder pour GitHub API
          CONTENT_BASE64=$(echo "$FILE_CONTENT" | base64 -w 0)
      
          # Créer le fichier workflow dans le dépôt cible
          gh api -X PUT \
            /repos/${{ github.repository_owner }}/$TARGET_REPO/contents/.github/workflows/build-central.yml \
            -f message="Add workflow to call central build template" \
            -f content="$CONTENT_BASE64"
          echo "Workflow copié dans $TARGET_REPO."

