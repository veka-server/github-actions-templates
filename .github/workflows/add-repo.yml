name: Replicate Secrets and Copy Workflow

on:
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Nom du d√©p√¥t cible (ex: mon-app)'
        required: true
      ghcr_pat:
        description: 'Valeur du GHCR_PAT √† cr√©er dans le d√©p√¥t cible'
        required: true
      discord_webhook_url:
        description: 'URL du webhook Discord √† cr√©er dans le d√©p√¥t cible'
        required: true

jobs:
  replicate-and-copy:
    runs-on: ubuntu-latest

    steps:

      # 1Ô∏è‚É£ Installer les d√©pendances Python
      - name: Setup Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pynacl requests

      # 2Ô∏è‚É£ Cr√©er les secrets GHCR_PAT et DISCORD_WEBHOOK_URL s'ils n'existent pas
      - name: Create secrets if not exists
        env:
          ADMIN_PAT: ${{ secrets.MASTER_PAT }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          GHCR_PAT_VALUE: ${{ github.event.inputs.ghcr_pat }}
          DISCORD_WEBHOOK_URL_VALUE: ${{ github.event.inputs.discord_webhook_url }}
          SOURCE_USER: ${{ github.repository_owner }}
        run: |
          python - <<'PYTHON'
          import os, requests, json, base64
          import nacl.encoding, nacl.public

          admin_pat = os.environ["ADMIN_PAT"]
          repo = os.environ["TARGET_REPO"]
          source_user = os.environ["SOURCE_USER"]

          headers = {
              "Authorization": f"token {admin_pat}",
              "Accept": "application/vnd.github+json"
          }

          def encrypt_secret(public_key: str, secret_value: str) -> str:
              public_key_obj = nacl.public.PublicKey(public_key.encode("utf-8"), encoder=nacl.encoding.Base64Encoder)
              sealed_box = nacl.public.SealedBox(public_key_obj)
              encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
              return base64.b64encode(encrypted).decode("utf-8")

          def create_secret(secret_name: str, secret_value: str):
              if not secret_value:
                  print(f"‚è≠Ô∏è Secret {secret_name} non fourni, on saute.")
                  return

              # V√©rifier si le secret existe d√©j√†
              url_list = f"https://api.github.com/repos/{source_user}/{repo}/actions/secrets"
              r = requests.get(url_list, headers=headers)
              r.raise_for_status()
              existing = [s["name"] for s in r.json().get("secrets", [])]

              if secret_name in existing:
                  print(f"‚úÖ Secret {secret_name} existe d√©j√† dans {repo}, rien √† faire.")
                  return

              # R√©cup√©rer la cl√© publique du d√©p√¥t
              url_key = f"https://api.github.com/repos/{source_user}/{repo}/actions/secrets/public-key"
              r = requests.get(url_key, headers=headers)
              r.raise_for_status()
              pubkey = r.json()
              key_id = pubkey["key_id"]
              key = pubkey["key"]

              encrypted_value = encrypt_secret(key, secret_value)

              # Cr√©er le secret
              put_url = f"https://api.github.com/repos/{source_user}/{repo}/actions/secrets/{secret_name}"
              data = {"encrypted_value": encrypted_value, "key_id": key_id}
              r = requests.put(put_url, headers=headers, data=json.dumps(data))
              r.raise_for_status()
              print(f"üöÄ Secret {secret_name} cr√©√© dans {repo} !")

          # Cr√©er GHCR_PAT
          create_secret("GHCR_PAT", os.environ.get("GHCR_PAT_VALUE"))

          # Cr√©er DISCORD_WEBHOOK_URL (si fourni)
          create_secret("DISCORD_WEBHOOK_URL", os.environ.get("DISCORD_WEBHOOK_URL_VALUE"))
          PYTHON

      # 3Ô∏è‚É£ Copier le workflow template uniquement si le fichier n'existe pas
      - name: Copy template workflow if not exists
        env:
          GH_TOKEN: ${{ secrets.MASTER_PAT }}
          TARGET_REPO: ${{ github.event.inputs.target_repo }}
          SOURCE_REPO: ${{ github.repository }}
        run: |
          # V√©rifie si le fichier existe d√©j√† dans le d√©p√¥t cible
          if gh api repos/${{ github.repository_owner }}/$TARGET_REPO/contents/.github/workflows/build-central.yml >/dev/null 2>&1; then
            echo "‚úÖ Le workflow existe d√©j√† dans $TARGET_REPO, rien √† faire."
            exit 0
          fi

          echo "üìÑ Copie du workflow template dans $TARGET_REPO..."
          FILE_CONTENT=$(gh api repos/$SOURCE_REPO/contents/templates/build.yml -q .content | base64 --decode)
          CONTENT_BASE64=$(echo "$FILE_CONTENT" | base64 -w 0)

          gh api -X PUT \
            /repos/${{ github.repository_owner }}/$TARGET_REPO/contents/.github/workflows/build-central.yml \
            -f message="Add workflow to call central build template" \
            -f content="$CONTENT_BASE64"

          echo "‚úÖ Workflow copi√© dans $TARGET_REPO."
